const { sequelize } = require('../db');
const { DataTypes } = require('sequelize');

const Position = sequelize.define('position', {
  id: { type: DataTypes.INTEGER, primaryKey: true, autoIncrement: true },
  name: { type: DataTypes.STRING, allowNull: false },
});

const User = sequelize.define('user', {
  id: { type: DataTypes.INTEGER, primaryKey: true, autoIncrement: true },
  name: { type: DataTypes.STRING, unique: false, allowNull: true, defaultValue: '' },
  positionId: { type: DataTypes.STRING, unique: false, allowNull: true, defaultValue: '' },
  mail: { type: DataTypes.STRING, unique: true, allowNull: true },
  phone: { type: DataTypes.STRING, unique: false, allowNull: false, defaultValue: '' },
  password: { type: DataTypes.STRING, allowNull: true },
  role: { type: DataTypes.STRING, defaultValue: 'USER', allowNull: false },
});

const Pet = sequelize.define('pet', {
  id: { type: DataTypes.INTEGER, primaryKey: true, autoIncrement: true },
  name: { type: DataTypes.STRING, unique: false, allowNull: true, defaultValue: '' },
  breed: { type: DataTypes.STRING, unique: true, allowNull: true },
  weight: { type: DataTypes.INTEGER, unique: false, allowNull: false, defaultValue: 0 },
  age: { type: DataTypes.INTEGER, unique: false, allowNull: false, defaultValue: 0 },
  note: { type: DataTypes.TEXT, unique: false, allowNull: true, defaultValue: '' },
  clientId: { type: DataTypes.INTEGER, allowNull: false },

  isDeleted: { type: DataTypes.BOOLEAN, unique: false, defaultValue: false },
});

const Client = sequelize.define('client', {
  id: { type: DataTypes.INTEGER, primaryKey: true, autoIncrement: true },
  name: { type: DataTypes.STRING, unique: false, allowNull: true, defaultValue: '' },
  mail: { type: DataTypes.STRING, unique: true, allowNull: true },
  phone: { type: DataTypes.STRING, unique: false, allowNull: false, defaultValue: '' },
  total: { type: DataTypes.INTEGER, unique: false, allowNull: false, defaultValue: 0 },
  
  isDeleted: { type: DataTypes.BOOLEAN, unique: false, defaultValue: false },
});

const Appointment = sequelize.define('appointment', {
  id: { type: DataTypes.INTEGER, primaryKey: true, autoIncrement: true },
  userId: { type: DataTypes.INTEGER, allowNull: false },
  clientId: { type: DataTypes.INTEGER, allowNull: false },
  date: { type: DataTypes.DATEONLY, allowNull: false },
  time: { type: DataTypes.TIME, allowNull: false },
  endTime: { type: DataTypes.TIME, allowNull: false },
  note: { type: DataTypes.TEXT, allowNull: true },
  petId: { type: DataTypes.INTEGER, allowNull: false },
});

const Service = sequelize.define('service', {
  id: { type: DataTypes.INTEGER, primaryKey: true, autoIncrement: true },
  name: { type: DataTypes.STRING, allowNull: false, unique: false },
  price: { type: DataTypes.INTEGER, allowNull: false },
  duration: { type: DataTypes.INTEGER, allowNull: false },
});

const ServiceProduct = sequelize.define('serviceProduct', {
  id: { type: DataTypes.INTEGER, primaryKey: true, autoIncrement: true },
  productId: { type: DataTypes.INTEGER, allowNull: false },
  quantity: { type: DataTypes.FLOAT, allowNull: false },
});

const AppointmentService = sequelize.define('appointmentService', {
  id: { type: DataTypes.INTEGER, primaryKey: true, autoIncrement: true },
  appointmentId: { type: DataTypes.INTEGER, allowNull: false },
  serviceId: { type: DataTypes.INTEGER, allowNull: false },
});

const Category = sequelize.define('category', {
  id: { type: DataTypes.INTEGER, primaryKey: true, autoIncrement: true },
  name: { type: DataTypes.STRING, unique: false, allowNull: false, defaultValue: '' },
  parentId: { type: DataTypes.INTEGER, unique: false, allowNull: true },
  isDeleted: { type: DataTypes.BOOLEAN, unique: false, defaultValue: false },
});

const Product = sequelize.define('product', {
  id: { type: DataTypes.INTEGER, primaryKey: true, autoIncrement: true },
  name: { type: DataTypes.STRING, unique: false, allowNull: false, defaultValue: '' },
  description: { type: DataTypes.TEXT, unique: false, allowNull: false, defaultValue: '' },
  link: { type: DataTypes.STRING, unique: true, allowNull: false, defaultValue: '' },
  images: { type: DataTypes.JSON, unique: false, allowNull: false},
  price: { type: DataTypes.FLOAT, unique: false, allowNull: false, defaultValue: 0 },
  count: { type: DataTypes.INTEGER, unique: false, defaultValue: 0 },
  
  quantity: { type: DataTypes.FLOAT, unique: false, defaultValue: 0 },
  // единица измерения
  measurementUnit: { type: DataTypes.STRING, unique: false, allowNull: false, defaultValue: '' },
  
  isForService: { type: DataTypes.BOOLEAN, unique: false, defaultValue: false },
  isDeleted: { type: DataTypes.BOOLEAN, unique: false, defaultValue: false },
});

const Sale = sequelize.define('sale', {
  id: { type: DataTypes.UUID, defaultValue: DataTypes.UUIDV4, primaryKey: true },
  userId: { type: DataTypes.INTEGER, allowNull: false },
  clientId: { type: DataTypes.INTEGER, allowNull: false },
  sum: { type: DataTypes.FLOAT, allowNull: false },
});

const SaleProduct = sequelize.define('saleProduct', {
  id: { type: DataTypes.INTEGER, primaryKey: true, autoIncrement: true },
  saleId: { type: DataTypes.UUID, allowNull: false },
  productId: { type: DataTypes.INTEGER, allowNull: false },
  count: { type: DataTypes.INTEGER, allowNull: false, defaultValue: 0 },
});

const Purchase = sequelize.define('purchase', {
  id: { type: DataTypes.UUID, defaultValue: DataTypes.UUIDV4, primaryKey: true },
  userId: { type: DataTypes.INTEGER, allowNull: false },
  counterparty: { type: DataTypes.STRING, unique: false, allowNull: false, defaultValue: '' },
  note: { type: DataTypes.TEXT, unique: false, allowNull: false, defaultValue: '' },
  sum: { type: DataTypes.FLOAT, allowNull: false },
});

const PurchaseProduct = sequelize.define('purchaseProduct', {
  id: { type: DataTypes.INTEGER, primaryKey: true, autoIncrement: true },
  purchaseId: { type: DataTypes.UUID, allowNull: false },
  productId: { type: DataTypes.INTEGER, allowNull: false },
  count: { type: DataTypes.INTEGER, allowNull: false, defaultValue: 0 },
});

const Schedule = sequelize.define('schedule', {
  id: { type: DataTypes.INTEGER, primaryKey: true, autoIncrement: true },
  userId: { type: DataTypes.INTEGER, allowNull: false },
  isMon: { type: DataTypes.BOOLEAN, allowNull: false },
  isTue: { type: DataTypes.BOOLEAN, allowNull: false },
  isWed: { type: DataTypes.BOOLEAN, allowNull: false },
  isThu: { type: DataTypes.BOOLEAN, allowNull: false },
  isFri: { type: DataTypes.BOOLEAN, allowNull: false },
  isSat: { type: DataTypes.BOOLEAN, allowNull: false },
  isSun: { type: DataTypes.BOOLEAN, allowNull: false },
  monFrom: { type: DataTypes.TIME, allowNull: false },
  monTo: { type: DataTypes.TIME, allowNull: false },
  tueFrom: { type: DataTypes.TIME, allowNull: false },
  tueTo: { type: DataTypes.TIME, allowNull: false },
  wedFrom: { type: DataTypes.TIME, allowNull: false },
  wedTo: { type: DataTypes.TIME, allowNull: false },
  thuFrom: { type: DataTypes.TIME, allowNull: false },
  thuTo: { type: DataTypes.TIME, allowNull: false },
  friFrom: { type: DataTypes.TIME, allowNull: false },
  friTo: { type: DataTypes.TIME, allowNull: false },
  satFrom: { type: DataTypes.TIME, allowNull: false },
  satTo: { type: DataTypes.TIME, allowNull: false },
  sunFrom: { type: DataTypes.TIME, allowNull: false },
  sunTo: { type: DataTypes.TIME, allowNull: false },
  branchId: { type: DataTypes.INTEGER, allowNull: false },
});

Product.belongsTo(Category)
Category.hasMany(Product);

Sale.belongsTo(User)
User.hasMany(Sale);
Sale.belongsTo(Client)
Client.hasMany(Sale);

Purchase.belongsTo(User)
User.hasMany(Purchase);

SaleProduct.belongsTo(Sale);
Sale.hasMany(SaleProduct);
SaleProduct.belongsTo(Product);
Product.hasMany(SaleProduct);

PurchaseProduct.belongsTo(Purchase);
Purchase.hasMany(PurchaseProduct);
PurchaseProduct.belongsTo(Product);
Product.hasMany(PurchaseProduct);

Appointment.belongsTo(Client);
Client.hasMany(Appointment);
Appointment.belongsTo(User);
User.hasMany(Appointment);

Pet.belongsTo(Client);
Client.hasMany(Pet);

AppointmentService.belongsTo(Appointment);
Appointment.hasMany(AppointmentService);
Appointment.belongsTo(Pet);
Pet.hasMany(Appointment);
AppointmentService.belongsTo(Service);
Service.hasMany(AppointmentService);

ServiceProduct.belongsTo(Service);
Service.hasMany(ServiceProduct);
ServiceProduct.belongsTo(Product);
Product.hasMany(ServiceProduct);

Schedule.belongsTo(User);
Position.belongsTo(User);

module.exports = {
  User,
  Category,
  Product,
  Sale,
  SaleProduct,
  Appointment,
  Client,
  Service,
  AppointmentService,
  ServiceProduct,
  Schedule,
  Position,
  Pet,
  Purchase,
  PurchaseProduct,
};
